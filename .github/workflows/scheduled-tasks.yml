name: Scheduled Tasks

on:
  schedule:
    # Run at midnight UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - expire-leases
          - notify-expiring
          - cleanup-logs

env:
  AWS_REGION: us-east-2

jobs:
  expire-leases:
    name: Process Expired Leases
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.task == 'all' || github.event.inputs.task == 'expire-leases' }}
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Execute lease expiration cron job
        run: |
          # Get a running backend task
          TASK_ARN=$(aws ecs list-tasks \
            --cluster rentdaddy-cluster \
            --service-name rentdaddy-backend-service \
            --query 'taskArns[0]' \
            --output text)
          
          if [ "$TASK_ARN" != "None" ]; then
            # Execute the cron job endpoint
            aws ecs execute-command \
              --cluster rentdaddy-cluster \
              --task $TASK_ARN \
              --container rentdaddy-backend \
              --interactive \
              --command "curl -X GET http://localhost:8080/cron/leases/expire -H 'Authorization: Bearer ${{ secrets.CRON_SECRET_TOKEN }}'"
          else
            echo "No running tasks found. Triggering via public endpoint..."
            curl -X GET "${{ secrets.DOMAIN_URL }}/cron/leases/expire" \
              -H "Authorization: Bearer ${{ secrets.CRON_SECRET_TOKEN }}"
          fi

  notify-expiring-leases:
    name: Send Lease Expiration Notifications
    runs-on: ubuntu-latest
    needs: [expire-leases]
    if: ${{ github.event_name == 'schedule' || github.event.inputs.task == 'all' || github.event.inputs.task == 'notify-expiring' }}
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Send lease expiration notifications
        run: |
          # Get a running backend task
          TASK_ARN=$(aws ecs list-tasks \
            --cluster rentdaddy-cluster \
            --service-name rentdaddy-backend-service \
            --query 'taskArns[0]' \
            --output text)
          
          if [ "$TASK_ARN" != "None" ]; then
            # Execute the notification endpoint
            aws ecs execute-command \
              --cluster rentdaddy-cluster \
              --task $TASK_ARN \
              --container rentdaddy-backend \
              --interactive \
              --command "curl -X POST http://localhost:8080/cron/leases/notify-expiring -H 'Authorization: Bearer ${{ secrets.CRON_SECRET_TOKEN }}'"
          else
            echo "No running tasks found. Triggering via public endpoint..."
            curl -X POST "${{ secrets.DOMAIN_URL }}/cron/leases/notify-expiring" \
              -H "Authorization: Bearer ${{ secrets.CRON_SECRET_TOKEN }}"
          fi

  cleanup-logs:
    name: Cleanup CloudWatch Logs
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.task == 'all' || github.event.inputs.task == 'cleanup-logs' }}
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup old log streams
        run: |
          # Get log groups
          LOG_GROUPS=$(aws logs describe-log-groups \
            --log-group-name-prefix "/ecs/rentdaddy" \
            --query 'logGroups[].logGroupName' \
            --output text)
          
          # For each log group, delete streams older than 30 days
          for LOG_GROUP in $LOG_GROUPS; do
            echo "Cleaning up log group: $LOG_GROUP"
            
            # Get timestamp for 30 days ago
            CUTOFF_TIME=$(($(date +%s) - 2592000))
            CUTOFF_TIME_MS=$((CUTOFF_TIME * 1000))
            
            # Get old log streams
            OLD_STREAMS=$(aws logs describe-log-streams \
              --log-group-name "$LOG_GROUP" \
              --order-by LastEventTime \
              --query "logStreams[?lastEventTime < \`$CUTOFF_TIME_MS\`].logStreamName" \
              --output text)
            
            # Delete old streams
            for STREAM in $OLD_STREAMS; do
              echo "Deleting stream: $STREAM"
              aws logs delete-log-stream \
                --log-group-name "$LOG_GROUP" \
                --log-stream-name "$STREAM" || true
            done
          done

  notify-status:
    name: Notify Scheduled Tasks Status
    runs-on: ubuntu-latest
    needs: [expire-leases, notify-expiring-leases, cleanup-logs]
    if: always()
    environment: production
    steps:
      - name: Send status notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Scheduled Tasks Complete",
              attachments: [{
                color: "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
                fields: [
                  {
                    title: "Expire Leases",
                    value: "${{ needs.expire-leases.result }}",
                    short: true
                  },
                  {
                    title: "Notify Expiring",
                    value: "${{ needs.notify-expiring-leases.result }}",
                    short: true
                  },
                  {
                    title: "Cleanup Logs",
                    value: "${{ needs.cleanup-logs.result }}",
                    short: true
                  }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}