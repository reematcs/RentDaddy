name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_BACKEND: rentdaddy/backend
  ECR_REPOSITORY_FRONTEND: rentdaddy/frontend
  ECS_SERVICE: rentdaddy-app-service
  ECS_CLUSTER: rentdaddy-cluster
  ECS_TASK_DEFINITION: rentdaddy-app

jobs:
  test:
    name: Run Tests
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test]
    if: |
      always() && 
      (needs.test.result == 'success' || github.event.inputs.skip_tests == 'true')
    environment: production
    # Single service deployment (backend and frontend in one task)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create production env files
        run: |
          # Backend env file
          cat > ./backend/backend.env.production.local << EOF
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          PG_URL=${{ secrets.PG_URL }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          CLERK_WEBHOOK=${{ secrets.CLERK_WEBHOOK }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM=${{ secrets.SMTP_FROM }}
          SMTP_USE_TLS=${{ secrets.SMTP_USE_TLS }}
          DOCUMENSO_API_KEY=${{ secrets.DOCUMENSO_API_KEY }}
          DOCUMENSO_WEBHOOK_SECRET=${{ secrets.DOCUMENSO_WEBHOOK_SECRET }}
          DOCUMENSO_API_URL=${{ secrets.DOCUMENSO_API_URL }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          CRON_SECRET_TOKEN=${{ secrets.CRON_SECRET_TOKEN }}
          DOMAIN_URL=${{ secrets.DOMAIN_URL }}
          PORT=8080
          EOF
          
          # Frontend env file
          cat > ./frontend/app/frontend.env.production.local << EOF
          VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}
          VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}
          VITE_DOCUMENSO_PUBLIC_URL=${{ secrets.VITE_DOCUMENSO_PUBLIC_URL }}
          VITE_ENV=production
          EOF

      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push backend
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:latest \
            -f ./backend/Dockerfile.prod \
            ./backend
          
          # Build and push frontend
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:latest \
            -f ./frontend/app/Dockerfile.prod \
            ./frontend/app

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new images
        id: task-def
        run: |
          # Update both container images in the task definition
          jq '.containerDefinitions[0].image = "'$ECR_REGISTRY'/'$ECR_REPOSITORY_BACKEND':'$IMAGE_TAG'" | 
              .containerDefinitions[1].image = "'$ECR_REGISTRY'/'$ECR_REPOSITORY_FRONTEND':'$IMAGE_TAG'"' \
              task-definition.json > new-task-definition.json
          echo "task-definition=new-task-definition.json" >> $GITHUB_OUTPUT

      - name: Deploy Amazon ECS task definition
        run: |
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Update service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment
          
          # Wait for service stability
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

  update-documenso-cert:
    name: Update Documenso Certificate
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if certificate exists
        run: |
          if [ -f "./certs/cert.p12" ]; then
            echo "CERT_EXISTS=true" >> $GITHUB_ENV
          else
            echo "CERT_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Upload certificate to S3
        if: env.CERT_EXISTS == 'true'
        run: |
          aws s3 cp ./certs/cert.p12 s3://rentdaddy-certificates/documenso/cert.p12 \
            --server-side-encryption AES256

      - name: Update ECS service to use new certificate
        if: env.CERT_EXISTS == 'true'
        run: |
          echo "Certificate update process would run here"
          # This would typically involve updating the task definition
          # to mount the certificate from S3 or EFS

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run database migrations
        run: |
          # Get task ARN
          TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --query 'taskArns[0]' --output text)
          
          # Run migrations
          aws ecs execute-command \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task $TASK_ARN \
            --container backend \
            --interactive \
            --command "migrate -path ./internal/db/migrations -database \$PG_URL up"

      - name: Verify deployment health
        run: |
          # Check backend health
          BACKEND_URL="https://${{ secrets.DOMAIN_URL }}/api/healthz"
          for i in {1..30}; do
            if curl -f $BACKEND_URL; then
              echo "Backend is healthy"
              break
            fi
            echo "Waiting for backend to be healthy... (attempt $i/30)"
            sleep 10
          done
          
          # Check frontend health
          FRONTEND_URL="https://${{ secrets.DOMAIN_URL }}"
          for i in {1..30}; do
            if curl -f $FRONTEND_URL; then
              echo "Frontend is healthy"
              break
            fi
            echo "Waiting for frontend to be healthy... (attempt $i/30)"
            sleep 10
          done

      - name: Notify deployment status
        if: always()
        continue-on-error: true
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to production ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Branch: ${{ github.ref }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK || '' }}