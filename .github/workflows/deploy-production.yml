name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY_BACKEND: rentdaddy-backend
  ECR_REPOSITORY_FRONTEND: rentdaddy-frontend
  ECS_SERVICE_BACKEND: rentdaddy-backend-service
  ECS_SERVICE_FRONTEND: rentdaddy-frontend-service
  ECS_CLUSTER: rentdaddy-cluster
  ECS_TASK_DEFINITION_BACKEND: rentdaddy-backend-task
  ECS_TASK_DEFINITION_FRONTEND: rentdaddy-frontend-task

jobs:
  test:
    name: Run Tests
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test]
    if: |
      always() && 
      (needs.test.result == 'success' || github.event.inputs.skip_tests == 'true')
    environment: production
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create production env file for ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "backend" ]; then
            cat > ./backend/backend.env.production.local << EOF
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          PG_URL=${{ secrets.PG_URL }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          CLERK_WEBHOOK=${{ secrets.CLERK_WEBHOOK }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SMTP_FROM=${{ secrets.SMTP_FROM }}
          SMTP_USE_TLS=${{ secrets.SMTP_USE_TLS }}
          DOCUMENSO_API_KEY=${{ secrets.DOCUMENSO_API_KEY }}
          DOCUMENSO_WEBHOOK_SECRET=${{ secrets.DOCUMENSO_WEBHOOK_SECRET }}
          DOCUMENSO_API_URL=${{ secrets.DOCUMENSO_API_URL }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          CRON_SECRET_TOKEN=${{ secrets.CRON_SECRET_TOKEN }}
          DOMAIN_URL=${{ secrets.DOMAIN_URL }}
          PORT=8080
          EOF
          else
            cat > ./frontend/app/frontend.env.production.local << EOF
          VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}
          VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}
          VITE_DOCUMENSO_PUBLIC_URL=${{ secrets.VITE_DOCUMENSO_PUBLIC_URL }}
          VITE_ENV=production
          EOF
          fi

      - name: Build, tag, and push ${{ matrix.service }} image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build arguments
          BUILD_CONTEXT="./${{ matrix.service }}"
          if [ "${{ matrix.service }}" = "frontend" ]; then
            BUILD_CONTEXT="./frontend/app"
          fi
          
          # Build and push
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t $ECR_REGISTRY/${{ matrix.service == 'backend' && env.ECR_REPOSITORY_BACKEND || env.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG \
            -t $ECR_REGISTRY/${{ matrix.service == 'backend' && env.ECR_REPOSITORY_BACKEND || env.ECR_REPOSITORY_FRONTEND }}:latest \
            -f $BUILD_CONTEXT/Dockerfile.prod \
            $BUILD_CONTEXT

      - name: Download current task definition for ${{ matrix.service }}
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ matrix.service == 'backend' && env.ECS_TASK_DEFINITION_BACKEND || env.ECS_TASK_DEFINITION_FRONTEND }} \
            --query taskDefinition > task-definition-${{ matrix.service }}.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-${{ matrix.service }}.json
          container-name: ${{ matrix.service == 'backend' && 'rentdaddy-backend' || 'rentdaddy-frontend' }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.service == 'backend' && env.ECR_REPOSITORY_BACKEND || env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service == 'backend' && env.ECS_SERVICE_BACKEND || env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  update-documenso-cert:
    name: Update Documenso Certificate
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if certificate exists
        run: |
          if [ -f "./certs/cert.p12" ]; then
            echo "CERT_EXISTS=true" >> $GITHUB_ENV
          else
            echo "CERT_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Upload certificate to S3
        if: env.CERT_EXISTS == 'true'
        run: |
          aws s3 cp ./certs/cert.p12 s3://rentdaddy-certificates/documenso/cert.p12 \
            --server-side-encryption AES256

      - name: Update ECS service to use new certificate
        if: env.CERT_EXISTS == 'true'
        run: |
          echo "Certificate update process would run here"
          # This would typically involve updating the task definition
          # to mount the certificate from S3 or EFS

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run database migrations
        run: |
          # Get backend task ARN
          TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE_BACKEND }} \
            --query 'taskArns[0]' --output text)
          
          # Run migrations
          aws ecs execute-command \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task $TASK_ARN \
            --container rentdaddy-backend \
            --interactive \
            --command "migrate -path ./internal/db/migrations -database \$PG_URL up"

      - name: Verify deployment health
        run: |
          # Check backend health
          BACKEND_URL="${{ secrets.DOMAIN_URL }}:8080/healthz"
          for i in {1..30}; do
            if curl -f $BACKEND_URL; then
              echo "Backend is healthy"
              break
            fi
            echo "Waiting for backend to be healthy... (attempt $i/30)"
            sleep 10
          done
          
          # Check frontend health
          FRONTEND_URL="https://${{ secrets.APP_DOMAIN }}"
          for i in {1..30}; do
            if curl -f $FRONTEND_URL; then
              echo "Frontend is healthy"
              break
            fi
            echo "Waiting for frontend to be healthy... (attempt $i/30)"
            sleep 10
          done

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to production ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Branch: ${{ github.ref }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}